#BlueJ class context
comment0.target=Simulator
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Simulator\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=bs\ sC\ mC\ tC
comment1.target=Simulator(int,\ int,\ int,\ int)
comment1.text=public\ Simulator(int\ foodRate,\ int\ foodValue,\ double\ mutationRate,\ int\ speed,\ int\ pixelSize)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ this.pixelSize\ \=\ pixelSize;\r\n\r\n\ \ \ \ \ \ \ \ critters\ \=\ new\ ArrayList<Critter>();\r\n\ \ \ \ \ \ \ \ food\ \=\ new\ ArrayList<Point>();\r\n\ \ \ \ \ \ \ \ this.foodRate\ \=\ foodRate;\r\n\ \ \ \ \ \ \ \ this.foodValue\ \=\ foodValue;\r\n\ \ \ \ \ \ \ \ maxTimeSteps\ \=\ 10;\r\n\ \ \ \ \ \ \ \ this.mutationRate\ \=\ mutationRate;\r\n\ \ \ \ \ \ \ \ barriers\ \=\ new\ ArrayList<Point>();\r\n\ \ \ \ \ \ \ \ this.speed\ \=\ speed;\r\n\ \ \ \ \ \ \ \ colorVar\ \=\ 0.5;\r\n\ \ \ \ \ \ \ \ sightRange\ \=\ 10;\r\n\ \ \ \ \ \ \ \ isFood\ \=\ new\ boolean[bs][bs];\ \r\n}
comment10.params=
comment10.target=double\ refreshMutationRate()
comment11.params=speed
comment11.target=void\ setSpeed(int)
comment12.params=foodRate
comment12.target=void\ setFoodRate(int)
comment13.params=foodValue
comment13.target=void\ setFoodValue(int)
comment14.params=mutationRate
comment14.target=void\ setMutationRate(double)
comment15.params=
comment15.target=double\ getColorVar()
comment16.params=cVar
comment16.target=void\ setColorVar(double)
comment17.params=
comment17.target=int\ getSightRange()
comment18.params=sightR
comment18.target=void\ setSightRange(int)
comment19.params=x\ y
comment19.target=boolean\ isFood(int,\ int)
comment2.params=
comment2.target=void\ pause()
comment20.params=point
comment20.target=boolean\ isFood(java.awt.Point)
comment21.params=x\ y
comment21.target=boolean\ isBarrier(int,\ int)
comment22.params=point
comment22.target=boolean\ isBarrier(java.awt.Point)
comment23.params=x\ y
comment23.target=boolean\ isCritter(int,\ int)
comment24.params=point
comment24.target=boolean\ isCritter(java.awt.Point)
comment25.params=point
comment25.target=void\ addCritterPoint(java.awt.Point)
comment26.params=x\ y
comment26.target=void\ addCritterPoint(int,\ int)
comment27.params=x\ y
comment27.target=void\ removeCritterPoint(int,\ int)
comment28.params=point
comment28.target=void\ removeCritterPoint(java.awt.Point)
comment29.params=x\ y
comment29.target=void\ addFood(int,\ int)
comment3.params=
comment3.target=void\ unpause()
comment30.params=point
comment30.target=void\ addFood(java.awt.Point)
comment31.params=x\ y
comment31.target=void\ removeFood(int,\ int)
comment32.params=point
comment32.target=void\ removeFood(java.awt.Point)
comment33.params=x\ y\ facing
comment33.target=boolean\ lookFood(int,\ int,\ java.lang.String)
comment34.params=string
comment34.target=java.lang.String\ toString(java.lang.String[])
comment34.text=\ public\ boolean\ isFoodU(int\ x,\ int\ y)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ Point\ thisPoint\ \=\ new\ Point(x,y);\r\n\ \ \ \ \ \ \ \ for\ (int\ i\ \=\ 1\ ;\ i\ <\ sightRange;\ i++)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ thisPoint.y\ \=\ y-i;\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (barriers.contains(thisPoint))\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ false;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (isFood(thisPoint))\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ true;\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ false;\r\n\ \ \ \ }\ \ \ \ \ \r\n\r\n\ \ \ \ public\ boolean\ isFoodD(int\ x,\ int\ y)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ Point\ thisPoint\ \=\ new\ Point(x,y);\r\n\ \ \ \ \ \ \ \ for\ (int\ i\ \=\ 1\ ;\ i\ <\ sightRange;\ i++)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ thisPoint.y\ \=\ y+i;\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (barriers.contains(thisPoint))\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ false;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (isFood(thisPoint))\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ true;\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ false;\r\n\ \ \ \ }\ \ \r\n\r\n\ \ \ \ public\ boolean\ isFoodR(int\ x,\ int\ y)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ Point\ thisPoint\ \=\ new\ Point(x,y);\r\n\ \ \ \ \ \ \ \ for\ (int\ i\ \=\ 1\ ;\ i\ <\ sightRange;\ i++)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ thisPoint.x\ \=\ x+i;\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (barriers.contains(thisPoint))\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ false;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (isFood(thisPoint))\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ true;\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ false;\r\n\ \ \ \ }\ \ \r\n\r\n\ \ \ \ public\ boolean\ isFoodL(int\ x,\ int\ y)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ Point\ thisPoint\ \=\ new\ Point(x,y);\r\n\ \ \ \ \ \ \ \ for\ (int\ i\ \=\ 1\ ;\ i\ <\ sightRange;\ i++)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ thisPoint.x\ \=\ x-i;\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (barriers.contains(thisPoint))\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ false;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (isFood(thisPoint))\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ true;\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ false;\r\n}
comment35.params=dna
comment35.target=void\ addCritter(java.lang.String)
comment36.params=dna\ number
comment36.target=void\ addCritter(java.lang.String,\ int)
comment37.params=critter
comment37.target=void\ addCritter(Critter)
comment38.params=critter
comment38.target=void\ moveCritter(Critter)
comment39.params=critter
comment39.target=void\ findElse(Critter)
comment4.params=
comment4.target=boolean\ isPaused()
comment40.params=critter
comment40.target=void\ findEnd(Critter)
comment41.params=critter
comment41.target=void\ critterTimeStep(Critter)
comment42.params=point
comment42.target=void\ addBarrier(java.awt.Point)
comment43.params=point
comment43.target=void\ removeBarrier(java.awt.Point)
comment44.params=x1\ y1\ x2\ y2
comment44.target=void\ addBarrierLine(int,\ int,\ int,\ int)
comment45.params=x1\ y1\ x2\ y2
comment45.target=void\ removeBarrierLine(int,\ int,\ int,\ int)
comment46.params=
comment46.target=void\ gameTimeStep()
comment47.params=steps
comment47.target=void\ gameTimeStep(int)
comment48.params=milliseconds
comment48.target=void\ wait(int)
comment5.params=s
comment5.target=void\ setBoardSize(int)
comment6.params=sC
comment6.target=void\ setSleepCost(int)
comment7.params=mC
comment7.target=void\ setMoveCost(int)
comment8.params=tC
comment8.target=void\ setTurnCost(int)
comment9.params=
comment9.target=int[]\ refresh()
numComments=49
